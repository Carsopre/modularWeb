# Generated by Django 2.2.3 on 2019-07-30 22:05

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('mainApp', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EntryTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=25, unique=True, verbose_name='Entry Tag')),
            ],
        ),
        migrations.CreateModel(
            name='PortFolioEntry',
            fields=[
                ('libraryentry_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mainApp.LibraryEntry')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('mainApp.libraryentry',),
        ),
        migrations.CreateModel(
            name='PortFolioLibrary',
            fields=[
                ('library_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mainApp.Library')),
                ('portfolio_tags', models.ManyToManyField(to='portFolioApp.EntryTag', verbose_name='Has tags')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('mainApp.library',),
        ),
        migrations.CreateModel(
            name='PortFolioPage',
            fields=[
                ('scaffoldpage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mainApp.ScaffoldPage')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('mainApp.scaffoldpage',),
        ),
        migrations.CreateModel(
            name='PortFolioPageLibraryCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='has_library', to='portFolioApp.PortFolioLibrary')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='has_page', to='portFolioApp.PortFolioPage')),
            ],
        ),
        migrations.AddField(
            model_name='portfoliopage',
            name='portfolio_libraries',
            field=models.ManyToManyField(through='portFolioApp.PortFolioPageLibraryCollection', to='portFolioApp.PortFolioLibrary', verbose_name='Has library'),
        ),
        migrations.CreateModel(
            name='PortFolioLibraryTagCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='has_library_collection', to='portFolioApp.PortFolioLibrary')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='has_entrytag', to='portFolioApp.EntryTag')),
            ],
        ),
        migrations.CreateModel(
            name='PortFolioEntryTagCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='has_entry_collection', to='portFolioApp.PortFolioEntry')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='has_entry', to='portFolioApp.EntryTag')),
            ],
        ),
        migrations.AddField(
            model_name='portfolioentry',
            name='entry_tags',
            field=models.ManyToManyField(through='portFolioApp.PortFolioEntryTagCollection', to='portFolioApp.EntryTag', verbose_name='Has tags'),
        ),
    ]
